generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model actions {
  id            String    @id @db.Uuid
  service_id    String    @db.Uuid
  name          String    @db.VarChar(100)
  description   String?
  config_schema Json?
  is_active     Boolean   @default(false)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  deleted_at    DateTime? @db.Timestamp(6)
  services      services  @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  areas         areas[]
}

model areas {
  id          String       @id @db.Uuid
  user_id     String       @db.Uuid
  action_id   String       @db.Uuid
  reaction_id String       @db.Uuid
  config      Json?
  is_active   Boolean      @default(false)
  created_at  DateTime?    @default(now()) @db.Timestamp(6)
  updated_at  DateTime?    @default(now()) @db.Timestamp(6)
  deleted_at  DateTime?    @db.Timestamp(6)
  actions     actions      @relation(fields: [action_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reactions   reactions    @relation(fields: [reaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  event_logs  event_logs[]
}

model event_logs {
  id          String    @id @db.Uuid
  user_id     String?   @db.Uuid
  area_id     String?   @db.Uuid
  event_type  String    @db.VarChar(100)
  description String?
  metadata    Json?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  areas       areas?    @relation(fields: [area_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([area_id], map: "idx_event_logs_area_id")
  @@index([created_at], map: "idx_event_logs_created_at")
  @@index([event_type], map: "idx_event_logs_event_type")
  @@index([user_id], map: "idx_event_logs_user_id")
}

model oauth_providers {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(50)
  is_active           Boolean               @default(false)
  auth_identities     auth_identities[]
  linked_accounts     linked_accounts[]
}

model reactions {
  id            String    @id @db.Uuid
  service_id    String    @db.Uuid
  name          String    @db.VarChar(100)
  description   String?
  is_active     Boolean   @default(false)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  deleted_at    DateTime? @db.Timestamp(6)
  areas         areas[]
  services      services  @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  config        Json?
}

model services {
  id          String      @id @db.Uuid
  name        String      @db.VarChar(100)
  description String?
  is_active   Boolean     @default(false)
  actions     actions[]
  reactions   reactions[]
}

model auth_identities {
  id               String           @id @db.Uuid
  user_id          String           @db.Uuid
  provider_id      Int
  provider_user_id String           @db.VarChar(255)
  email            String?          @db.VarChar(255)
  name             String?          @db.VarChar(255)
  avatar_url       String?          @db.VarChar(1024)
  created_at       DateTime?        @default(now()) @db.Timestamp(6)
  updated_at       DateTime?        @default(now()) @db.Timestamp(6)
  users            users            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  oauth_providers  oauth_providers  @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider_id, provider_user_id])
  @@unique([user_id, provider_id])
}

model linked_accounts {
  id                     String           @id @db.Uuid
  user_id                String           @db.Uuid
  provider_id            Int
  provider_user_id       String           @db.VarChar(255)
  access_token           String?
  refresh_token          String?
  access_token_expires_at DateTime?
  scopes                 String?
  is_active              Boolean          @default(false)
  created_at             DateTime?        @default(now()) @db.Timestamp(6)
  updated_at             DateTime?        @default(now()) @db.Timestamp(6)
  deleted_at             DateTime?        @db.Timestamp(6)
  users                  users            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  oauth_providers        oauth_providers  @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider_id, provider_user_id])
  @@unique([user_id, provider_id])
}

model users {
  id                  String                @id @default(uuid()) @db.Uuid
  email               String                @unique @db.VarChar(255)
  password_hash       String?               @db.VarChar(255)
  is_verified         Boolean               @default(false)
  is_active           Boolean               @default(false)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  updated_at          DateTime?             @default(now()) @db.Timestamp(6)
  deleted_at          DateTime?             @db.Timestamp(6)
  areas               areas[]
  event_logs          event_logs[]
  auth_identities     auth_identities[]
  linked_accounts     linked_accounts[]
}
